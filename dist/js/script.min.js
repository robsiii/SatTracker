"use strict";function geodGBL(){var e;"undefined"==(e=void 0===EARTH_A?"undefined":_typeof(EARTH_A))&&wgs84()}function earthcon(e,t){var a,s,i,n,r;n=Number(e),r=Number(t),a=1-r/n,i=1-r*r/(n*n),s=Math.sqrt(i),EARTH_A=n,EARTH_B=r,EARTH_F=a,EARTH_Ecc=s,EARTH_Esq=i}function wgs84(){var e,t,a;e=6378.137,a=1/298.257223563,t=e*(1-a),earthcon(e,t)}function radcur(e){var t,a,s,i,n,r,o,l,u,c,p,h,m,d,v,f,_=new Array(3),y=Math.PI/180;return geodGBL(),t=EARTH_A,a=EARTH_B,i=t*t,n=a*a,r=1-n/i,Math.sqrt(r),s=Number(e),o=Math.cos(y*s),l=Math.sin(y*s),u=1-r*l*l,c=Math.sqrt(u),p=t/c,h=p*(1-r)/u,m=p*o,f=(1-r)*p*l,d=m*m+f*f,v=Math.sqrt(d),_[0]=v,_[1]=p,_[2]=h,_}function rearth(e){var t,a;return a=Number(e),t=radcur(a),t[0]}function gc2gd(e,t){var a,s,i,n,r,o,l,u,c,p=Math.PI/180,h=1/p,m=new Array(3);return geodGBL(),s=Number(e),i=Number(t),r=EARTH_Ecc,o=r*r,u=i,m=radcur(s),n=m[1],c=1-o*n/(n+u),l=Math.tan(p*s)/c,a=h*Math.atan(l),m=radcur(a),n=m[1],c=1-o*n/(n+u),l=Math.tan(p*s)/c,a=h*Math.atan(l)}function gd2gc(e,t){var a,s,i,n,r,o,l,u,c=Math.PI/180,p=1/c,h=new Array(3);return geodGBL(),a=Number(e),s=Number(t),n=EARTH_Ecc,r=n*n,l=s,h=radcur(a),i=h[1],u=1-r*i/(i+l),o=Math.tan(c*a)*u,p*Math.atan(o)}function llenu(e,t){var a,s,i,n,r,o,l,u=new Array(3),c=new Array(3),p=new Array(3),h=new Array(3),i=Math.PI/180;return a=Number(e),s=Number(t),n=Math.cos(i*a),r=Math.sin(i*a),o=Math.cos(i*s),l=Math.sin(i*s),u[0]=-l,u[1]=o,u[2]=0,c[0]=-o*r,c[1]=-l*r,c[2]=n,p[0]=o*n,p[1]=l*n,p[2]=r,h[0]=u,h[1]=c,h[2]=p,h}function xyzllh(e){var t,a,s,i,n,r,o,l,u,c,p,h,m,d,v,f,_,y,b,w=Math.PI/180,g=new Array(3),C=new Array(3);if(geodGBL(),d=EARTH_Esq,r=e[0],o=e[1],l=e[2],r=Number(r),o=Number(o),l=Number(l),n=Math.sqrt(r*r+o*o+l*l),t=Math.asin(l/n)/w,p=Math.abs(r)+Math.abs(o),y=p<1e-10?0:Math.atan2(o,r)/w,y<0&&(y+=360),(u=Math.sqrt(r*r+o*o))<1e-10)return _=90,l<0&&(_=-90),b=n-rearth(_),C[0]=_,C[1]=y,C[2]=b,C;i=rearth(t),b=n-i,_=gc2gd(t,b),g=radcur(_),m=g[1];for(var h=0;h<5&&(f=Math.sin(w*_),c=(l+m*d*f)/u,a=Math.atan(c)/w,s=a-_,_=a,v=Math.cos(w*_),g=radcur(_),m=g[1],b=u/v-m,!(Math.abs(s)<1e-12));h++);return C[0]=_,C[1]=y,C[2]=b,C}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function filter_date(e){for(var t=0;t<satellites.length;t++){var a=new Date(satellites[t].date),a=a.getFullYear();e[0]>a||e[1]<a?(satellites[t].object.show=!1,satellites[t].line.show=!1):(satellites[t].object.show=!0,satellites[t].line.show=!0)}}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},EARTH_A,EARTH_B,EARTH_F,EARTH_Ecc,EARTH_Esq,_createClass=function(){function e(e,t){for(var a=0;a<t.length;a++){var s=t[a];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,a,s){return a&&e(t.prototype,a),s&&e(t,s),t}}(),viewer=new Cesium.Viewer("cesiumContainer",{fullscreenButton:!1,baseLayerPicker:!1,timeline:!1,homeButton:!1,infoBoxe:!1,navigationHelpButton:!1,selectionIndicator:!1,vrButton:!1,geocoder:!1,sceneModePicker:!1,animation:!1,skyAtmosphere:!1,imageryProvider:new Cesium.ArcGisMapServerImageryProvider({url:"https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer"})});document.querySelector(".cesium-viewer-bottom").style.display="none",viewer.scene._screenSpaceCameraController.minimumZoomDistance=1e7,viewer.scene._screenSpaceCameraController.maximumZoomDistance=3e8;for(var sat=function(){function e(t,a,s,i,n){_classCallCheck(this,e);this.name=t,this.date=s,this.id=a,this.true_pos=n,this.pos=xyzllh(n),this.infos=i,this.object=new Cesium.Entity({id:this.id,name:this.name,position:new Cesium.Cartesian3.fromDegrees(this.pos[0],this.pos[1],1e3*this.pos[2]),ellipsoid:{radii:new Cesium.Cartesian3(7e4,7e4,7e4),material:Cesium.Color.RED},label:{text:this.name,font:"10pt arial",style:Cesium.LabelStyle.FILL_AND_OUTLINE,outlineWidth:2,verticalOrigin:Cesium.VerticalOrigin.BOTTOM,pixelOffset:new Cesium.Cartesian2(0,-25)}}),this.line=new Cesium.Entity({name:"Line",position:Cesium.Cartesian3.fromDegrees(this.pos[0],this.pos[1],1e3*this.pos[2]),polyline:{positions:[Cesium.Cartesian3.fromDegrees(this.pos[0],this.pos[1],0),Cesium.Cartesian3.fromDegrees(this.pos[0],this.pos[1],1e3*this.pos[2])],width:new Cesium.ConstantProperty(2),material:Cesium.Color.WHITE,followSurface:new Cesium.ConstantProperty(!1)}}),this.popup=document.createElement("div"),this.popup.className="pop-up",this.popup.appendChild(document.createElement("div")),this.popup.children[0].className="pop-up-container",void 0==this.infos.country?this.popup.children[0].innerHTML='<p class="name">'+this.name+"</p><p>Launched on the "+this.date+"</p><p>No more data found on this satellite</p>":this.popup.children[0].innerHTML='<p class="name">'+this.name+"</p><p>Launched on the "+this.date+"</p><p>Organisation : "+this.infos.country+"</p><p>Mass : "+this.infos.mass+"</p><p>"+this.infos.description+"</p>",this.create()}return _createClass(e,[{key:"create",value:function(){viewer.entities.add(this.object)}},{key:"draw_lines",value:function(){viewer.entities.add(this.line)}}]),e}(),satellites=[],i=0;i<sats.length;i++)satellites.push(new sat(sats[i].name,sats[i].id,sats[i].date,sats[i].infos,sats[i].pos));for(var button=document.querySelector(".btn"),lines_displayed=!1,_i=0;_i<satellites.length;_i++)satellites[_i].draw_lines(),satellites[_i].line.show=!1;button.onclick=function(){if(lines_displayed)for(var e=0;e<satellites.length;e++)satellites[e].line.show=!1,lines_displayed=!1;else for(var t=0;t<satellites.length;t++)satellites[t].line.show=!0,lines_displayed=!0};var last_popup,handler_click=new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);handler_click.setInputAction(function(e){var t=viewer.scene.pick(e.position);if(Cesium.defined(t))for(var a=0;a<satellites.length;a++)!function(e){(t.id===satellites[e].object&&last_popup!==satellites[e].popup||t.id===satellites[e].line&&last_popup!==satellites[e].popup)&&(void 0!==last_popup&&(last_popup.className="pop-up pop-up-anim-reverse",setTimeout(function(){document.querySelector("body").removeChild(last_popup),last_popup=void 0},300)),document.querySelector("body").appendChild(satellites[e].popup),satellites[e].popup.className="pop-up pop-up-anim",setTimeout(function(){last_popup=satellites[e].popup},300))}(a);else void 0!==last_popup&&(last_popup.className="pop-up pop-up-anim-reverse",setTimeout(function(){document.querySelector("body").removeChild(last_popup),last_popup=void 0},300))},Cesium.ScreenSpaceEventType.LEFT_CLICK);var last_hover,handler_hover=new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);handler_hover.setInputAction(function(e){var t=viewer.scene.pick(e.endPosition);if(Cesium.defined(t))for(var a=0;a<satellites.length;a++)t.id===satellites[a].object&&t.id!==last_hover&&(void 0!==last_hover&&(last_hover._label._font._value="10pt arial"),satellites[a].object._label._font._value="15pt arial",last_hover=satellites[a].object);else void 0!==last_hover&&(last_hover._label._font._value="10pt arial",last_hover=void 0)},Cesium.ScreenSpaceEventType.MOUSE_MOVE);var parent=document.querySelector(".range-slider"),rangeS=parent.querySelectorAll("input[type=range]"),numberS=parent.querySelectorAll("input[type=number]");rangeS.forEach(function(e){e.oninput=function(){var e=parseFloat(rangeS[0].value),t=parseFloat(rangeS[1].value);if(e>t){var a=[t,e];e=a[0],t=a[1]}numberS[0].value=e,numberS[1].value=t,filter_date([numberS[0].value,numberS[1].value])}}),numberS.forEach(function(e){e.onblur=function(){var e=parseFloat(numberS[0].value),t=parseFloat(numberS[1].value);if(e>t){var a=e;numberS[0].value=t,numberS[1].value=a}rangeS[0].value=e,rangeS[1].value=t,filter_date([rangeS[0].value,rangeS[1].value])},e.onkeyup=function(){13==event.keyCode&&e.blur()}});var select_org=document.querySelector("select");select_org.onchange=function(){for(var e=0;e<satellites.length;e++)"Organisation"==this.value?satellites[e].object.show=!0:"Others"==this.value?"Pas de donnÃ©es"!=satellites[e].infos?(satellites[e].object.show=!1,satellites[e].line.show=!1):(satellites[e].object.show=!0,satellites[e].line.show=!0):satellites[e].infos.country==this.value?(satellites[e].object.show=!0,satellites[e].line.show=!0):(satellites[e].object.show=!1,satellites[e].line.show=!1)};var search=document.querySelector("#name");search.onchange=function(){for(var e=this.value.toLowerCase(),t=0;t<satellites.length;t++)satellites[t].name.toLowerCase().includes(e)?(satellites[t].object.show=!0,satellites[t].line.show=!0):(satellites[t].object.show=!1,satellites[t].line.show=!1)};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnZlcnRlci5qcyIsInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJnZW9kR0JMIiwidHN0Z2xvYmFsIiwiRUFSVEhfQSIsIl90eXBlb2YiLCJ3Z3M4NCIsImVhcnRoY29uIiwiYWkiLCJiaSIsImYiLCJlY2MiLCJlY2NzcSIsImEiLCJiIiwiTnVtYmVyIiwiTWF0aCIsInNxcnQiLCJFQVJUSF9CIiwiRUFSVEhfRiIsIkVBUlRIX0VjYyIsIkVBUlRIX0VzcSIsIndnczg0YSIsIndnczg0YiIsIndnczg0ZiIsInJhZGN1ciIsImxhdGkiLCJsYXQiLCJhc3EiLCJic3EiLCJjbGF0Iiwic2xhdCIsImRzcSIsImQiLCJybiIsInJtIiwicmhvIiwicnNxIiwiciIsInoiLCJycm5ybSIsIkFycmF5IiwiZHRyIiwiUEkiLCJjb3MiLCJzaW4iLCJyZWFydGgiLCJnYzJnZCIsImZsYXRnY2kiLCJhbHRrbWkiLCJmbGF0Z2QiLCJmbGF0Z2MiLCJhbHRrbSIsImVzcSIsInRsYXQiLCJhbHRub3ciLCJyYXRpbyIsInJ0ZCIsInRhbiIsImF0YW4iLCJnZDJnYyIsImZsYXRnZGkiLCJsbGVudSIsImZsYXRpIiwiZmxvbmkiLCJmbGF0IiwiZmxvbiIsImNsb24iLCJzbG9uIiwiZWUiLCJlbiIsImV1IiwiZW51IiwieHl6bGxoIiwieHZlYyIsImZsYXRuIiwiZGxhdCIsInJub3ciLCJycCIsIngiLCJ5IiwicCIsInRhbmdkIiwidGVzdHZhbCIsImtvdW50IiwibGxodmVjIiwiYXNpbiIsImFicyIsImF0YW4yIiwiZmlsdGVyX2RhdGUiLCJkYXRlcyIsImkiLCJzYXRlbGxpdGVzIiwibGVuZ3RoIiwic2F0X2RhdGUiLCJEYXRlIiwiZGF0ZSIsImdldEZ1bGxZZWFyIiwib2JqZWN0Iiwic2hvdyIsImxpbmUiLCJ2aWV3ZXIiLCJDZXNpdW0iLCJWaWV3ZXIiLCJmdWxsc2NyZWVuQnV0dG9uIiwiYmFzZUxheWVyUGlja2VyIiwidGltZWxpbmUiLCJob21lQnV0dG9uIiwiaW5mb0JveGUiLCJuYXZpZ2F0aW9uSGVscEJ1dHRvbiIsInNlbGVjdGlvbkluZGljYXRvciIsInZyQnV0dG9uIiwiZ2VvY29kZXIiLCJzY2VuZU1vZGVQaWNrZXIiLCJhbmltYXRpb24iLCJza3lBdG1vc3BoZXJlIiwiaW1hZ2VyeVByb3ZpZGVyIiwiQXJjR2lzTWFwU2VydmVySW1hZ2VyeVByb3ZpZGVyIiwidXJsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic3R5bGUiLCJkaXNwbGF5Iiwic2NlbmUiLCJfc2NyZWVuU3BhY2VDYW1lcmFDb250cm9sbGVyIiwibWluaW11bVpvb21EaXN0YW5jZSIsIm1heGltdW1ab29tRGlzdGFuY2UiLCJzYXQiLCJuYW1lIiwiaWQiLCJpbmZvcyIsInBvcyIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJ0cnVlX3BvcyIsIkVudGl0eSIsInBvc2l0aW9uIiwiQ2FydGVzaWFuMyIsImZyb21EZWdyZWVzIiwiZWxsaXBzb2lkIiwicmFkaWkiLCJtYXRlcmlhbCIsIkNvbG9yIiwiUkVEIiwibGFiZWwiLCJ0ZXh0IiwiZm9udCIsIkxhYmVsU3R5bGUiLCJGSUxMX0FORF9PVVRMSU5FIiwib3V0bGluZVdpZHRoIiwidmVydGljYWxPcmlnaW4iLCJWZXJ0aWNhbE9yaWdpbiIsIkJPVFRPTSIsInBpeGVsT2Zmc2V0IiwiQ2FydGVzaWFuMiIsInBvbHlsaW5lIiwicG9zaXRpb25zIiwid2lkdGgiLCJDb25zdGFudFByb3BlcnR5IiwiV0hJVEUiLCJmb2xsb3dTdXJmYWNlIiwicG9wdXAiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiYXBwZW5kQ2hpbGQiLCJjaGlsZHJlbiIsInVuZGVmaW5lZCIsImNvdW50cnkiLCJpbm5lckhUTUwiLCJtYXNzIiwiZGVzY3JpcHRpb24iLCJjcmVhdGUiLCJlbnRpdGllcyIsImFkZCIsInNhdHMiLCJwdXNoIiwiYnV0dG9uIiwibGluZXNfZGlzcGxheWVkIiwiZHJhd19saW5lcyIsIm9uY2xpY2siLCJsYXN0X3BvcHVwIiwiaGFuZGxlcl9jbGljayIsIlNjcmVlblNwYWNlRXZlbnRIYW5kbGVyIiwiY2FudmFzIiwic2V0SW5wdXRBY3Rpb24iLCJjbGljayIsInBpY2tlZE9iamVjdCIsInBpY2siLCJkZWZpbmVkIiwic2V0VGltZW91dCIsInJlbW92ZUNoaWxkIiwiU2NyZWVuU3BhY2VFdmVudFR5cGUiLCJMRUZUX0NMSUNLIiwibGFzdF9ob3ZlciIsImhhbmRsZXJfaG92ZXIiLCJtb3ZlbWVudCIsImVuZFBvc2l0aW9uIiwiX2xhYmVsIiwiX2ZvbnQiLCJfdmFsdWUiLCJNT1VTRV9NT1ZFIiwicGFyZW50IiwicmFuZ2VTIiwicXVlcnlTZWxlY3RvckFsbCIsIm51bWJlclMiLCJmb3JFYWNoIiwiZWwiLCJvbmlucHV0Iiwic2xpZGUxIiwicGFyc2VGbG9hdCIsInZhbHVlIiwic2xpZGUyIiwiX3JlZiIsIm9uYmx1ciIsIm51bWJlcjEiLCJudW1iZXIyIiwidG1wIiwib25rZXl1cCIsImV2ZW50Iiwia2V5Q29kZSIsImJsdXIiLCJzZWxlY3Rfb3JnIiwib25jaGFuZ2UiLCJzZWFyY2giLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIl0sIm1hcHBpbmdzIjoiWUFrQkEsU0FBU0EsV0FLUCxHQUFJQyxFQUdhLGVBRGpCQSxFQUFBLFNBQW1CQyxRQUFuQixZQUFBQyxRQUFtQkQsV0FDV0UsUUFNaEMsUUFBU0MsVUFBU0MsRUFBSUMsR0FTcEIsR0FBSUMsR0FBR0MsRUFBS0MsRUFBT0MsRUFBR0MsQ0FFdEJELEdBQUlFLE9BQU9QLEdBQ1hNLEVBQUlDLE9BQU9OLEdBRVhDLEVBQUksRUFBSUksRUFBSUQsRUFDWkQsRUFBUSxFQUFJRSxFQUFJQSxHQUFLRCxFQUFJQSxHQUN6QkYsRUFBTUssS0FBS0MsS0FBS0wsR0FFaEJSLFFBQVVTLEVBQ1ZLLFFBQVVKLEVBQ1ZLLFFBQVVULEVBQ1ZVLFVBQVlULEVBQ1pVLFVBQVlULEVBTWQsUUFBU04sU0FVUCxHQUFJZ0IsR0FBUUMsRUFBUUMsQ0FFcEJGLEdBQVMsU0FDVEUsRUFBUyxFQUFNLGNBQ2ZELEVBQVNE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QUlDLFdBQVdDLE9BQVFGLElBQ25CLGdCQUFkMEMsS0FBSzZFLE1BQXlCdEgsV0FBV0QsR0FBR08sT0FBT0MsTUFBTyxFQUUxQyxVQUFka0MsS0FBSzZFLE1BQ29CLGtCQUF2QnRILFdBQVdELEdBQUd1QyxPQUNoQnRDLFdBQVdELEdBQUdPLE9BQU9DLE1BQU8sRUFDNUJQLFdBQVdELEdBQUdTLEtBQUtELE1BQU8sSUFFMUJQLFdBQVdELEdBQUdPLE9BQU9DLE1BQU8sRUFDNUJQLFdBQVdELEdBQUdTLEtBQUtELE1BQU8sR0FFbkJQLFdBQVdELEdBQUd1QyxNQUFNcUMsU0FBV2xDLEtBQUs2RSxPQUM3Q3RILFdBQVdELEdBQUdPLE9BQU9DLE1BQU8sRUFDNUJQLFdBQVdELEdBQUdTLEtBQUtELE1BQU8sSUFFMUJQLFdBQVdELEdBQUdPLE9BQU9DLE1BQU8sRUFDNUJQLFdBQVdELEdBQUdTLEtBQUtELE1BQU8sR0FNbEMsSUFBSTRILFFBQVN4RyxTQUFTQyxjQUFjLFFBRXBDdUcsUUFBT0QsU0FBVyxXQUVoQixJQUFLLEdBREQ5RixHQUFPSyxLQUFLNkUsTUFBTWMsY0FDYnJJLEVBQUksRUFBR0EsRUFBSUMsV0FBV0MsT0FBUUYsSUFDakNDLFdBQVdELEdBQUdxQyxLQUFLZ0csY0FBY0MsU0FBU2pHLElBQzVDcEMsV0FBV0QsR0FBR08sT0FBT0MsTUFBTyxFQUM1QlAsV0FBV0QsR0FBR1MsS0FBS0QsTUFBTyxJQUUxQlAsV0FBV0QsR0FBR08sT0FBT0MsTUFBTyxFQUM1QlAsV0FBV0QsR0FBR1MsS0FBS0QsTUFBTyIsImZpbGUiOiJzY3JpcHQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogICAgICAgICAgICAgZ2VvZGVzeSByb3V0aW5lcyBpbiBKYXZhU2NyaXB0XG4gICAgICAgICAgICAgICAgIEphbWVzIFIuIENseW5jaCBOUFMgLyAyMDAzXG4gICAgICAgICAgICAgICBcbiAgICAgICAgICBEb25lIGZvciBzdXBwb3J0IG9mIHdlYiBlZHVjYXRpb24gcGFnZXNcblxuXG4gICAgICAgICAgPT0gbXVzdCBjb252ZXJ0IGlucHV0cyB0byBudW1iZXJzIGZvciBzYWZldHkgPT1cbiAgICAgICAgICA9PSBpZiBzdHJpbmcgY29tZXMgaW4gLSBzb21ldGltZXMgd29ya3MsIHNvbWV0aW1lcyBub3QgIT09XG4qL1xuXG52YXIgRUFSVEhfQTtcbnZhciBFQVJUSF9CO1xudmFyIEVBUlRIX0Y7XG52YXIgRUFSVEhfRWNjO1xudmFyIEVBUlRIX0VzcTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gZ2VvZEdCTCgpXG5cbi8vICAgICAgICAgICAgIHRlc3QgYW5kIGVuc3VyZSBnZW9kZXN5IGdsb2JhbHMgbG9hZGVkXG57XG5cbiAgdmFyIHRzdGdsb2JhbFxuXG4gIHRzdGdsb2JhbCA9IHR5cGVvZiBFQVJUSF9BO1xuICBpZiAodHN0Z2xvYmFsID09IFwidW5kZWZpbmVkXCIpIHdnczg0KClcblxufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBlYXJ0aGNvbihhaSwgYmkpXG5cbi8qICAgICAgICBTZXRzIEVhcnRoIENvbnN0YW50cyBhcyBnbG9iYWxzXG4gICAgICAgICAgICAgLS0gIGlucHV0IGEsYlxuICAgICAgICAgICAgIC0tICBMZWF2ZXMgR2xvYmFscyBcbiAgICAgICAgICAgICAgICAgRUFSVEhfQSAgICAgIEVBUlRIX0IgICBFQVJUSF9GICBFQVJUSF9FY2NcbiovXG5cbntcbiAgdmFyIGYsIGVjYywgZWNjc3EsIGEsIGJcblxuICBhID0gTnVtYmVyKGFpKTtcbiAgYiA9IE51bWJlcihiaSk7XG5cbiAgZiA9IDEgLSBiIC8gYTtcbiAgZWNjc3EgPSAxIC0gYiAqIGIgLyAoYSAqIGEpO1xuICBlY2MgPSBNYXRoLnNxcnQoZWNjc3EpO1xuXG4gIEVBUlRIX0EgPSBhO1xuICBFQVJUSF9CID0gYjtcbiAgRUFSVEhfRiA9IGY7XG4gIEVBUlRIX0VjYyA9IGVjYztcbiAgRUFSVEhfRXNxID0gZWNjc3E7XG59XG5cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gd2dzODQoKVxuXG4vKiAgICAgICAgV0dTODQgRWFydGggQ29uc3RhbnRzXG4gICAgICAgICAgICAgLS0gIHJldHVybnMgYSxiLGYsZSAgLS1cbiAgICAgICAgICAgICAtLSAgTGVhdmVzIEdsb2JhbHMgXG4gICAgICAgICAgICAgICAgIEVBUlRIX0EgICAgICBFQVJUSF9CICAgRUFSVEhfRiAgRUFSVEhfRWNjXG5cbiovXG5cbntcbiAgdmFyIHdnczg0YSwgd2dzODRiLCB3Z3M4NGZcblxuICB3Z3M4NGEgPSA2Mzc4LjEzNztcbiAgd2dzODRmID0gMS4wIC8gMjk4LjI1NzIyMzU2MztcbiAgd2dzODRiID0gd2dzODRhICogKDEuMCAtIHdnczg0Zik7XG5cbiAgZWFydGhjb24od2dzODRhLCB3Z3M4NGIpO1xuXG59XG5cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gcmFkY3VyKGxhdGkpXG5cbi8qXG4gICAgICAgY29tcHV0ZSB0aGUgcmFkaWkgYXQgdGhlIGdlb2RldGljIGxhdGl0dWRlIGxhdCAoaW4gZGVncmVlcylcbiAgICAgXG4gICAgIGlucHV0OlxuICAgICAgICAgICAgICAgbGF0ICAgICAgIGdlb2RldGljIGxhdGl0dWRlIGluIGRlZ3JlZXNcbiAgICAgb3V0cHV0OiAgIFxuICAgICAgICAgICAgICAgcnJucm0gICAgIGFuIGFycmF5IDMgbG9uZ1xuICAgICAgICAgICAgICAgICAgICAgICAgIHIsICBybiwgIHJtICAgaW4ga21cblxuKi9cblxue1xuXG4gIHZhciBycm5ybSA9IG5ldyBBcnJheSgzKVxuXG4gIHZhciBkdHIgPSBNYXRoLlBJIC8gMTgwLjBcblxuICB2YXIgYSwgYiwgbGF0XG4gIHZhciBhc3EsIGJzcSwgZWNjc3EsIGVjYywgY2xhdCwgc2xhdFxuICB2YXIgZHNxLCBkLCBybiwgcm0sIHJobywgcnNxLCByLCB6XG5cbiAgLy8gICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBnZW9kR0JMKCk7XG5cbiAgYSA9IEVBUlRIX0E7XG4gIGIgPSBFQVJUSF9CO1xuXG4gIGFzcSA9IGEgKiBhO1xuICBic3EgPSBiICogYjtcbiAgZWNjc3EgPSAxIC0gYnNxIC8gYXNxO1xuICBlY2MgPSBNYXRoLnNxcnQoZWNjc3EpO1xuXG4gIGxhdCA9IE51bWJlcihsYXRpKTtcblxuICBjbGF0ID0gTWF0aC5jb3MoZHRyICogbGF0KTtcbiAgc2xhdCA9IE1hdGguc2luKGR0ciAqIGxhdCk7XG5cbiAgZHNxID0gMS4wIC0gZWNjc3EgKiBzbGF0ICogc2xhdDtcbiAgZCA9IE1hdGguc3FydChkc3EpO1xuXG4gIHJuID0gYSAvIGQ7XG4gIHJtID0gcm4gKiAoMS4wIC0gZWNjc3EpIC8gZHNxO1xuXG4gIHJobyA9IHJuICogY2xhdDtcbiAgeiA9ICgxLjAgLSBlY2NzcSkgKiBybiAqIHNsYXQ7XG4gIHJzcSA9IHJobyAqIHJobyArIHogKiB6O1xuICByID0gTWF0aC5zcXJ0KHJzcSk7XG5cbiAgcnJucm1bMF0gPSByO1xuICBycm5ybVsxXSA9IHJuO1xuICBycm5ybVsyXSA9IHJtO1xuXG4gIHJldHVybiAocnJucm0pO1xuXG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vICAgICAgICBwaHlzaWNhbCByYWRpdXMgb2YgZWFydGggZnJvbSBnZW9kZXRpYyBsYXRpdHVkZVxuXG5mdW5jdGlvbiByZWFydGgobGF0aSkge1xuICB2YXIgcnJucm0sIHIsIGxhdFxuXG4gIGxhdCA9IE51bWJlcihsYXRpKTtcblxuICBycm5ybSA9IHJhZGN1cihsYXQpO1xuICByID0gcnJucm1bMF07XG5cbiAgcmV0dXJuIChyKTtcblxufVxuXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIGdjMmdkKGZsYXRnY2ksIGFsdGttaSlcblxuLyogICAgICAgIGdlb2NlbnRyaWMgbGF0aXR1ZGUgdG8gZ2VvZGV0aWMgbGF0aXR1ZGVcblxuICAgICBJbnB1dDpcbiAgICAgICAgICAgICAgIGZsYXRnYyAgICBnZW9jZW50cmljIGxhdGl0dWRlIGRlZy5cbiAgICAgICAgICAgICAgIGFsdGttICAgICBhbHRpdGlkZSBpbiBrbVxuICAgICBvdXB1dDpcbiAgICAgICAgICAgICAgIGZsYXRnZCAgICBnZW9kZXRpYyBsYXRpdHVkZSBpbiBkZWdcblxuKi9cblxue1xuXG4gIHZhciBkdHIgPSBNYXRoLlBJIC8gMTgwLjA7XG4gIHZhciBydGQgPSAxIC8gZHRyO1xuXG4gIHZhciBmbGF0Z2QsIGZsYXRnYywgYWx0a21cbiAgdmFyIHJybnJtID0gbmV3IEFycmF5KDMpXG4gIHZhciByZSwgcm4sIGVjYywgZXNxO1xuICB2YXIgc2xhdCwgY2xhdCwgdGxhdFxuICB2YXIgYWx0bm93LCByYXRpb1xuXG4gIGdlb2RHQkwoKTtcblxuICBmbGF0Z2MgPSBOdW1iZXIoZmxhdGdjaSk7XG4gIGFsdGttID0gTnVtYmVyKGFsdGttaSk7XG5cbiAgZWNjID0gRUFSVEhfRWNjO1xuICBlc3EgPSBlY2MgKiBlY2M7XG5cbiAgLy8gICAgICAgICAgICAgYXBwcm94aW1hdGlvbiBieSBzdGFnZXNcbiAgLy8gICAgICAgICAgICAgMXN0IHVzZSBnYy1sYXQgYXMgaWYgaXMgZ2QsIHRoZW4gY29ycmVjdCBhbHQgZGVwZW5kZW5jZVxuXG4gIGFsdG5vdyA9IGFsdGttO1xuXG4gIHJybnJtID0gcmFkY3VyKGZsYXRnYyk7XG4gIHJuID0gcnJucm1bMV07XG5cbiAgcmF0aW8gPSAxIC0gZXNxICogcm4gLyAocm4gKyBhbHRub3cpO1xuXG4gIHRsYXQgPSBNYXRoLnRhbihkdHIgKiBmbGF0Z2MpIC8gcmF0aW87XG4gIGZsYXRnZCA9IHJ0ZCAqIE1hdGguYXRhbih0bGF0KTtcblxuICAvLyAgICAgICAgbm93IHVzZSB0aGlzIGFwcHJveGltYXRpb24gZm9yIGdkLWxhdCB0byBnZXQgcm4gZXRjLlxuXG4gIHJybnJtID0gcmFkY3VyKGZsYXRnZCk7XG4gIHJuID0gcnJucm1bMV07XG5cbiAgcmF0aW8gPSAxIC0gZXNxICogcm4gLyAocm4gKyBhbHRub3cpXG4gIHRsYXQgPSBNYXRoLnRhbihkdHIgKiBmbGF0Z2MpIC8gcmF0aW87XG4gIGZsYXRnZCA9IHJ0ZCAqIE1hdGguYXRhbih0bGF0KTtcblxuICByZXR1cm4gZmxhdGdkXG5cbn1cblxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbmZ1bmN0aW9uIGdkMmdjKGZsYXRnZGksIGFsdGttaSlcblxuLyogICAgICAgIGdlb2RldGljIGxhdGl0dWRlIHRvIGdlb2NlbnRyaWMgbGF0aXR1ZGVcblxuICAgICBJbnB1dDpcbiAgICAgICAgICAgICAgIGZsYXRnZCAgICBnZW9kZXRpYyBsYXRpdHVkZSBkZWcuXG4gICAgICAgICAgICAgICBhbHRrbSAgICAgYWx0aXRpZGUgaW4ga21cbiAgICAgb3VwdXQ6XG4gICAgICAgICAgICAgICBmbGF0Z2MgICAgZ2VvY2VudHJpYyBsYXRpdHVkZSBpbiBkZWdcblxuKi9cblxue1xuXG4gIHZhciBkdHIgPSBNYXRoLlBJIC8gMTgwLjA7XG4gIHZhciBydGQgPSAxIC8gZHRyO1xuXG4gIHZhciBmbGF0Z2MsIGZsYXRnZCwgYWx0a21cbiAgdmFyIHJybnJtID0gbmV3IEFycmF5KDMpXG4gIHZhciByZSwgcm4sIGVjYywgZXNxO1xuICB2YXIgc2xhdCwgY2xhdCwgdGxhdFxuICB2YXIgYWx0bm93LCByYXRpb1xuXG4gIGdlb2RHQkwoKTtcblxuICBmbGF0Z2QgPSBOdW1iZXIoZmxhdGdkaSk7XG4gIGFsdGttID0gTnVtYmVyKGFsdGttaSk7XG5cbiAgZWNjID0gRUFSVEhfRWNjO1xuICBlc3EgPSBlY2MgKiBlY2M7XG5cbiAgYWx0bm93ID0gYWx0a207XG5cbiAgcnJucm0gPSByYWRjdXIoZmxhdGdkKTtcbiAgcm4gPSBycm5ybVsxXTtcblxuICByYXRpbyA9IDEgLSBlc3EgKiBybiAvIChybiArIGFsdG5vdyk7XG5cbiAgdGxhdCA9IE1hdGgudGFuKGR0ciAqIGZsYXRnZCkgKiByYXRpbztcbiAgZmxhdGdjID0gcnRkICogTWF0aC5hdGFuKHRsYXQpO1xuXG4gIHJldHVybiBmbGF0Z2M7XG5cbn1cblxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBsbGVudShmbGF0aSwgZmxvbmkpXG5cbi8qICAgICAgICBsYXRpdHVkZSBsb25naXR1ZGUgdG8gZWFzdCxub3J0aCx1cCB1bml0IHZlY3RvcnNcblxuICAgICBpbnB1dDpcbiAgICAgICAgICAgICAgIGZsYXQgICAgICBsYXRpdHVkZSBpbiBkZWdlZXMgTlxuICAgICAgICAgICAgICAgICAgICAgICAgIFsgZ2MgLT4gZ2MgZW51LCAgZ2QgdXN1YWwgZW51IF1cbiAgICAgICAgICAgICAgIGZsb24gICAgICBsb25naXR1ZGUgaW4gZGVncmVlcyBFXG4gICAgIG91dHB1dDpcbiAgICAgICAgICAgICAgIGVudVszWzNdXSAgcGFja2VkIDMtdW5pdCB2ZWN0b3JzIC8gZWFjaCBhIDMgdmVjdG9yXG5cbiovXG5cbntcblxuICB2YXIgZmxhdCwgZmxvbjtcbiAgdmFyIGR0ciwgY2xhdCwgc2xhdCwgY2xvbiwgc2xvbjtcbiAgdmFyIGVlID0gbmV3IEFycmF5KDMpO1xuICB2YXIgZW4gPSBuZXcgQXJyYXkoMyk7XG4gIHZhciBldSA9IG5ldyBBcnJheSgzKTtcblxuICB2YXIgZW51ID0gbmV3IEFycmF5KDMpO1xuXG4gIHZhciBkdHIgPSBNYXRoLlBJIC8gMTgwLjBcblxuXG4gIC8vICAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgZmxhdCA9IE51bWJlcihmbGF0aSk7XG4gIGZsb24gPSBOdW1iZXIoZmxvbmkpO1xuXG4gIGNsYXQgPSBNYXRoLmNvcyhkdHIgKiBmbGF0KTtcbiAgc2xhdCA9IE1hdGguc2luKGR0ciAqIGZsYXQpO1xuICBjbG9uID0gTWF0aC5jb3MoZHRyICogZmxvbik7XG4gIHNsb24gPSBNYXRoLnNpbihkdHIgKiBmbG9uKTtcblxuICBlZVswXSA9IC1zbG9uO1xuICBlZVsxXSA9IGNsb247XG4gIGVlWzJdID0gMC4wO1xuXG4gIGVuWzBdID0gLWNsb24gKiBzbGF0O1xuICBlblsxXSA9IC1zbG9uICogc2xhdDtcbiAgZW5bMl0gPSBjbGF0O1xuXG4gIGV1WzBdID0gY2xvbiAqIGNsYXQ7XG4gIGV1WzFdID0gc2xvbiAqIGNsYXQ7XG4gIGV1WzJdID0gc2xhdDtcblxuICBlbnVbMF0gPSBlZTtcbiAgZW51WzFdID0gZW47XG4gIGVudVsyXSA9IGV1O1xuXG4gIHJldHVybiBlbnU7XG5cbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24geHl6bGxoKHh2ZWMpXG5cbi8qICAgICAgICB4eXogdmVjdG9yICB0byAgbGF0LGxvbixoZWlnaHRcblxuICAgICBpbnB1dDpcbiAgICAgICAgICB4dmVjWzNdICAgeHl6IEVDRUYgbG9jYXRpb25cbiAgICAgb3V0cHV0OlxuXG4gICAgICAgICAgbGxodmVjWzNdIHdpdGggY29tcG9uZW50c1xuXG4gICAgICAgICAgZmxhdCAgICAgIGdlb2RldGljIGxhdGl0dWRlIGluIGRlZ1xuICAgICAgICAgIGZsb24gICAgICBsb25naXR1ZGUgaW4gZGVnXG4gICAgICAgICAgYWx0a20gICAgIGFsdGl0dWRlIGluIGttXG5cbiovXG5cbntcblxuICB2YXIgZHRyID0gTWF0aC5QSSAvIDE4MC4wO1xuICB2YXIgZmxhdGdjLCBmbGF0biwgZGxhdDtcbiAgdmFyIHJub3csIHJwO1xuICB2YXIgeCwgeSwgeiwgcDtcbiAgdmFyIHRhbmdjLCB0YW5nZDtcblxuICB2YXIgdGVzdHZhbCwga291bnQ7XG5cbiAgdmFyIHJuLCBlc3E7XG4gIHZhciBjbGF0LCBzbGF0O1xuICB2YXIgcnJucm0gPSBuZXcgQXJyYXkoMyk7XG5cbiAgdmFyIGZsYXQsIGZsb24sIGFsdGttO1xuICB2YXIgbGxodmVjID0gbmV3IEFycmF5KDMpO1xuXG5cbiAgZ2VvZEdCTCgpO1xuXG4gIGVzcSA9IEVBUlRIX0VzcTtcblxuICB4ID0geHZlY1swXTtcbiAgeSA9IHh2ZWNbMV07XG4gIHogPSB4dmVjWzJdO1xuXG4gIHggPSBOdW1iZXIoeCk7XG4gIHkgPSBOdW1iZXIoeSk7XG4gIHogPSBOdW1iZXIoeik7XG5cbiAgcnAgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcblxuICBmbGF0Z2MgPSBNYXRoLmFzaW4oeiAvIHJwKSAvIGR0cjtcblxuICB0ZXN0dmFsID0gTWF0aC5hYnMoeCkgKyBNYXRoLmFicyh5KTtcbiAgaWYgKHRlc3R2YWwgPCAxLjBlLTEwKSB7XG4gICAgZmxvbiA9IDAuMFxuICB9IGVsc2Uge1xuICAgIGZsb24gPSBNYXRoLmF0YW4yKHksIHgpIC8gZHRyXG4gIH1cbiAgaWYgKGZsb24gPCAwLjApIHtcbiAgICBmbG9uID0gZmxvbiArIDM2MC4wXG4gIH1cblxuICBwID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuXG4gIC8vICAgICAgICAgICAgIG9uIHBvbGUgc3BlY2lhbCBjYXNlXG5cbiAgaWYgKHAgPCAxLjBlLTEwKSB7XG4gICAgZmxhdCA9IDkwLjBcbiAgICBpZiAoeiA8IDAuMCkge1xuICAgICAgZmxhdCA9IC05MC4wXG4gICAgfVxuXG4gICAgYWx0a20gPSBycCAtIHJlYXJ0aChmbGF0KTtcbiAgICBsbGh2ZWNbMF0gPSBmbGF0O1xuICAgIGxsaHZlY1sxXSA9IGZsb247XG4gICAgbGxodmVjWzJdID0gYWx0a207XG5cbiAgICByZXR1cm4gbGxodmVjO1xuICB9XG5cbiAgLy8gICAgICAgIGZpcnN0IGl0ZXJhdGlvbiwgdXNlIGZsYXRnYyB0byBnZXQgYWx0aXR1ZGUgXG4gIC8vICAgICAgICBhbmQgYWx0IG5lZWRlZCB0byBjb252ZXJ0IGdjIHRvIGdkIGxhdC5cblxuICBybm93ID0gcmVhcnRoKGZsYXRnYyk7XG4gIGFsdGttID0gcnAgLSBybm93O1xuICBmbGF0ID0gZ2MyZ2QoZmxhdGdjLCBhbHRrbSk7XG5cbiAgcnJucm0gPSByYWRjdXIoZmxhdCk7XG4gIHJuID0gcnJucm1bMV07XG5cbiAgZm9yICh2YXIga291bnQgPSAwOyBrb3VudCA8IDU7IGtvdW50KyspIHtcbiAgICBzbGF0ID0gTWF0aC5zaW4oZHRyICogZmxhdCk7XG4gICAgdGFuZ2QgPSAoeiArIHJuICogZXNxICogc2xhdCkgLyBwO1xuICAgIGZsYXRuID0gTWF0aC5hdGFuKHRhbmdkKSAvIGR0cjtcblxuICAgIGRsYXQgPSBmbGF0biAtIGZsYXQ7XG4gICAgZmxhdCA9IGZsYXRuO1xuICAgIGNsYXQgPSBNYXRoLmNvcyhkdHIgKiBmbGF0KTtcblxuICAgIHJybnJtID0gcmFkY3VyKGZsYXQpO1xuICAgIHJuID0gcnJucm1bMV07XG5cbiAgICBhbHRrbSA9IChwIC8gY2xhdCkgLSBybjtcblxuICAgIGlmIChNYXRoLmFicyhkbGF0KSA8IDEuMGUtMTIpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gIH1cblxuICBsbGh2ZWNbMF0gPSBmbGF0O1xuICBsbGh2ZWNbMV0gPSBmbG9uO1xuICBsbGh2ZWNbMl0gPSBhbHRrbTtcblxuICByZXR1cm4gbGxodmVjO1xuXG59IiwidmFyIHZpZXdlciA9IG5ldyBDZXNpdW0uVmlld2VyKCdjZXNpdW1Db250YWluZXInLCB7XG5cbiAgZnVsbHNjcmVlbkJ1dHRvbjogZmFsc2UsXG4gIGJhc2VMYXllclBpY2tlcjogZmFsc2UsXG4gIHRpbWVsaW5lOiBmYWxzZSxcbiAgaG9tZUJ1dHRvbjogZmFsc2UsXG4gIGluZm9Cb3hlOiBmYWxzZSxcbiAgbmF2aWdhdGlvbkhlbHBCdXR0b246IGZhbHNlLFxuICBzZWxlY3Rpb25JbmRpY2F0b3I6IGZhbHNlLFxuICB2ckJ1dHRvbjogZmFsc2UsXG4gIGdlb2NvZGVyOiBmYWxzZSxcbiAgc2NlbmVNb2RlUGlja2VyOiBmYWxzZSxcbiAgYW5pbWF0aW9uOiBmYWxzZSxcbiAgc2t5QXRtb3NwaGVyZTogZmFsc2UsXG4gIGltYWdlcnlQcm92aWRlcjogbmV3IENlc2l1bS5BcmNHaXNNYXBTZXJ2ZXJJbWFnZXJ5UHJvdmlkZXIoe1xuICAgIHVybDogJ2h0dHBzOi8vc2VydmljZXMuYXJjZ2lzb25saW5lLmNvbS9BcmNHSVMvcmVzdC9zZXJ2aWNlcy9Xb3JsZF9JbWFnZXJ5L01hcFNlcnZlcidcbiAgfSlcblxufSk7XG5cbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jZXNpdW0tdmlld2VyLWJvdHRvbScpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxudmlld2VyLnNjZW5lLl9zY3JlZW5TcGFjZUNhbWVyYUNvbnRyb2xsZXIubWluaW11bVpvb21EaXN0YW5jZSA9IDEwMDAwMDAwO1xudmlld2VyLnNjZW5lLl9zY3JlZW5TcGFjZUNhbWVyYUNvbnRyb2xsZXIubWF4aW11bVpvb21EaXN0YW5jZSA9IDMwMDAwMDAwMDtcblxuLy8gU0FURUxMSVRFU1xuXG5jbGFzcyBzYXQge1xuICBjb25zdHJ1Y3RvcihuYW1lLCBpZCwgZGF0ZSwgaW5mb3MsIHBvcykge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuZGF0ZSA9IGRhdGU7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMudHJ1ZV9wb3MgPSBwb3M7XG4gICAgdGhpcy5wb3MgPSB4eXpsbGgocG9zKTtcbiAgICB0aGlzLmluZm9zID0gaW5mb3M7XG4gICAgdGhpcy5vYmplY3QgPSBuZXcgQ2VzaXVtLkVudGl0eSh7XG4gICAgICBpZDogdGhpcy5pZCxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIHBvc2l0aW9uOiBuZXcgQ2VzaXVtLkNhcnRlc2lhbjMuZnJvbURlZ3JlZXModGhpcy5wb3NbMF0sIHRoaXMucG9zWzFdLCB0aGlzLnBvc1syXSAqIDEwMDApLFxuICAgICAgZWxsaXBzb2lkOiB7XG4gICAgICAgIHJhZGlpOiBuZXcgQ2VzaXVtLkNhcnRlc2lhbjMoNzAwMDAuMCwgNzAwMDAuMCwgNzAwMDAuMCksXG4gICAgICAgIG1hdGVyaWFsOiBDZXNpdW0uQ29sb3IuUkVEXG5cbiAgICAgIH0sXG4gICAgICBsYWJlbDoge1xuICAgICAgICB0ZXh0OiB0aGlzLm5hbWUsXG4gICAgICAgIGZvbnQ6ICcxMHB0IGFyaWFsJyxcbiAgICAgICAgc3R5bGU6IENlc2l1bS5MYWJlbFN0eWxlLkZJTExfQU5EX09VVExJTkUsXG4gICAgICAgIG91dGxpbmVXaWR0aDogMixcbiAgICAgICAgdmVydGljYWxPcmlnaW46IENlc2l1bS5WZXJ0aWNhbE9yaWdpbi5CT1RUT00sXG4gICAgICAgIHBpeGVsT2Zmc2V0OiBuZXcgQ2VzaXVtLkNhcnRlc2lhbjIoMCwgLTI1KVxuICAgICAgfVxuXG4gICAgfSk7XG4gICAgdGhpcy5saW5lID0gbmV3IENlc2l1bS5FbnRpdHkoe1xuICAgICAgbmFtZTogJ0xpbmUnLFxuICAgICAgcG9zaXRpb246IENlc2l1bS5DYXJ0ZXNpYW4zLmZyb21EZWdyZWVzKHRoaXMucG9zWzBdLCB0aGlzLnBvc1sxXSwgdGhpcy5wb3NbMl0gKiAxMDAwKSxcbiAgICAgIHBvbHlsaW5lOiB7XG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAgICAgIENlc2l1bS5DYXJ0ZXNpYW4zLmZyb21EZWdyZWVzKHRoaXMucG9zWzBdLCB0aGlzLnBvc1sxXSwgMCksXG4gICAgICAgICAgICAgICAgQ2VzaXVtLkNhcnRlc2lhbjMuZnJvbURlZ3JlZXModGhpcy5wb3NbMF0sIHRoaXMucG9zWzFdLCB0aGlzLnBvc1syXSAqIDEwMDApXG4gICAgICAgICAgICBdLFxuICAgICAgICB3aWR0aDogbmV3IENlc2l1bS5Db25zdGFudFByb3BlcnR5KDIpLFxuICAgICAgICBtYXRlcmlhbDogQ2VzaXVtLkNvbG9yLldISVRFLFxuICAgICAgICBmb2xsb3dTdXJmYWNlOiBuZXcgQ2VzaXVtLkNvbnN0YW50UHJvcGVydHkoZmFsc2UpXG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5wb3B1cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMucG9wdXAuY2xhc3NOYW1lID0gJ3BvcC11cCc7XG4gICAgdGhpcy5wb3B1cC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG4gICAgdGhpcy5wb3B1cC5jaGlsZHJlblswXS5jbGFzc05hbWUgPSAncG9wLXVwLWNvbnRhaW5lcic7XG4gICAgaWYgKHRoaXMuaW5mb3MuY291bnRyeSA9PSB1bmRlZmluZWQpIHRoaXMucG9wdXAuY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gJzxwIGNsYXNzPVwibmFtZVwiPicgKyB0aGlzLm5hbWUgKyAnPC9wPjxwPkxhdW5jaGVkIG9uIHRoZSAnICsgdGhpcy5kYXRlICsgJzwvcD48cD5ObyBtb3JlIGRhdGEgZm91bmQgb24gdGhpcyBzYXRlbGxpdGU8L3A+JztcbiAgICBlbHNlIHRoaXMucG9wdXAuY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gJzxwIGNsYXNzPVwibmFtZVwiPicgKyB0aGlzLm5hbWUgKyAnPC9wPjxwPkxhdW5jaGVkIG9uIHRoZSAnICsgdGhpcy5kYXRlICsgJzwvcD48cD5PcmdhbmlzYXRpb24gOiAnICsgdGhpcy5pbmZvcy5jb3VudHJ5ICsgJzwvcD48cD5NYXNzIDogJyArIHRoaXMuaW5mb3MubWFzcyArICc8L3A+PHA+JyArIHRoaXMuaW5mb3MuZGVzY3JpcHRpb24gKyAnPC9wPic7XG5cbiAgICB0aGlzLmNyZWF0ZSgpO1xuICB9XG5cbiAgY3JlYXRlKCkge1xuICAgIHZpZXdlci5lbnRpdGllcy5hZGQodGhpcy5vYmplY3QpO1xuICB9XG5cbiAgZHJhd19saW5lcygpIHtcbiAgICB2aWV3ZXIuZW50aXRpZXMuYWRkKHRoaXMubGluZSk7XG4gIH1cbn1cblxudmFyIHNhdGVsbGl0ZXMgPSBbXTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCBzYXRzLmxlbmd0aDsgaSsrKSB7XG4gIHNhdGVsbGl0ZXMucHVzaChuZXcgc2F0KHNhdHNbaV0ubmFtZSwgc2F0c1tpXS5pZCwgc2F0c1tpXS5kYXRlLCBzYXRzW2ldLmluZm9zLCBzYXRzW2ldLnBvcykpO1xufVxuXG4vLyBMSU5FU1xudmFyIGJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idG4nKTtcbnZhciBsaW5lc19kaXNwbGF5ZWQgPSBmYWxzZTtcbmZvciAobGV0IGkgPSAwOyBpIDwgc2F0ZWxsaXRlcy5sZW5ndGg7IGkrKykge1xuICBzYXRlbGxpdGVzW2ldLmRyYXdfbGluZXMoKTtcbiAgc2F0ZWxsaXRlc1tpXS5saW5lLnNob3cgPSBmYWxzZTtcbn1cbmJ1dHRvbi5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICBpZiAobGluZXNfZGlzcGxheWVkKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzYXRlbGxpdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzYXRlbGxpdGVzW2ldLmxpbmUuc2hvdyA9IGZhbHNlO1xuICAgICAgbGluZXNfZGlzcGxheWVkID0gZmFsc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2F0ZWxsaXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgc2F0ZWxsaXRlc1tpXS5saW5lLnNob3cgPSB0cnVlO1xuICAgICAgbGluZXNfZGlzcGxheWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIFBPUFVQXG5cbnZhciBsYXN0X3BvcHVwO1xuXG4vLyBIQU5ETEVSU1xudmFyIGhhbmRsZXJfY2xpY2sgPSBuZXcgQ2VzaXVtLlNjcmVlblNwYWNlRXZlbnRIYW5kbGVyKHZpZXdlci5zY2VuZS5jYW52YXMpO1xuaGFuZGxlcl9jbGljay5zZXRJbnB1dEFjdGlvbihmdW5jdGlvbiAoY2xpY2spIHtcbiAgdmFyIHBpY2tlZE9iamVjdCA9IHZpZXdlci5zY2VuZS5waWNrKGNsaWNrLnBvc2l0aW9uKTtcbiAgaWYgKENlc2l1bS5kZWZpbmVkKHBpY2tlZE9iamVjdCkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNhdGVsbGl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwaWNrZWRPYmplY3QuaWQgPT09IHNhdGVsbGl0ZXNbaV0ub2JqZWN0ICYmIGxhc3RfcG9wdXAgIT09IHNhdGVsbGl0ZXNbaV0ucG9wdXAgfHwgcGlja2VkT2JqZWN0LmlkID09PSBzYXRlbGxpdGVzW2ldLmxpbmUgJiYgbGFzdF9wb3B1cCAhPT0gc2F0ZWxsaXRlc1tpXS5wb3B1cCkge1xuICAgICAgICBpZiAobGFzdF9wb3B1cCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbGFzdF9wb3B1cC5jbGFzc05hbWUgPSAncG9wLXVwIHBvcC11cC1hbmltLXJldmVyc2UnO1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLnJlbW92ZUNoaWxkKGxhc3RfcG9wdXApO1xuICAgICAgICAgICAgbGFzdF9wb3B1cCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9LCAzMDApO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5hcHBlbmRDaGlsZChzYXRlbGxpdGVzW2ldLnBvcHVwKTtcbiAgICAgICAgc2F0ZWxsaXRlc1tpXS5wb3B1cC5jbGFzc05hbWUgPSAncG9wLXVwIHBvcC11cC1hbmltJztcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbGFzdF9wb3B1cCA9IHNhdGVsbGl0ZXNbaV0ucG9wdXA7XG4gICAgICAgIH0sIDMwMCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2VcbiAgaWYgKGxhc3RfcG9wdXAgIT09IHVuZGVmaW5lZCkge1xuICAgIGxhc3RfcG9wdXAuY2xhc3NOYW1lID0gJ3BvcC11cCBwb3AtdXAtYW5pbS1yZXZlcnNlJztcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5yZW1vdmVDaGlsZChsYXN0X3BvcHVwKTtcbiAgICAgIGxhc3RfcG9wdXAgPSB1bmRlZmluZWQ7XG4gICAgfSwgMzAwKTtcbiAgfVxufSwgQ2VzaXVtLlNjcmVlblNwYWNlRXZlbnRUeXBlLkxFRlRfQ0xJQ0spO1xuXG52YXIgbGFzdF9ob3ZlcjtcblxudmFyIGhhbmRsZXJfaG92ZXIgPSBuZXcgQ2VzaXVtLlNjcmVlblNwYWNlRXZlbnRIYW5kbGVyKHZpZXdlci5zY2VuZS5jYW52YXMpO1xuaGFuZGxlcl9ob3Zlci5zZXRJbnB1dEFjdGlvbihmdW5jdGlvbiAobW92ZW1lbnQpIHtcbiAgdmFyIHBpY2tlZE9iamVjdCA9IHZpZXdlci5zY2VuZS5waWNrKG1vdmVtZW50LmVuZFBvc2l0aW9uKTtcbiAgaWYgKENlc2l1bS5kZWZpbmVkKHBpY2tlZE9iamVjdCkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNhdGVsbGl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwaWNrZWRPYmplY3QuaWQgPT09IHNhdGVsbGl0ZXNbaV0ub2JqZWN0KSB7XG4gICAgICAgIGlmIChwaWNrZWRPYmplY3QuaWQgIT09IGxhc3RfaG92ZXIpIHtcbiAgICAgICAgICBpZiAobGFzdF9ob3ZlciAhPT0gdW5kZWZpbmVkKSBsYXN0X2hvdmVyLl9sYWJlbC5fZm9udC5fdmFsdWUgPSAnMTBwdCBhcmlhbCc7XG4gICAgICAgICAgc2F0ZWxsaXRlc1tpXS5vYmplY3QuX2xhYmVsLl9mb250Ll92YWx1ZSA9ICcxNXB0IGFyaWFsJztcbiAgICAgICAgICBsYXN0X2hvdmVyID0gc2F0ZWxsaXRlc1tpXS5vYmplY3Q7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGxhc3RfaG92ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGFzdF9ob3Zlci5fbGFiZWwuX2ZvbnQuX3ZhbHVlID0gJzEwcHQgYXJpYWwnO1xuICAgICAgbGFzdF9ob3ZlciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbn0sIENlc2l1bS5TY3JlZW5TcGFjZUV2ZW50VHlwZS5NT1VTRV9NT1ZFKTtcblxuXG4vLyBGSUxURVIgU0xJREVSXG5cbnZhciBwYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJhbmdlLXNsaWRlclwiKTtcblxudmFyXG4gIHJhbmdlUyA9IHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbdHlwZT1yYW5nZV1cIiksXG4gIG51bWJlclMgPSBwYXJlbnQucXVlcnlTZWxlY3RvckFsbChcImlucHV0W3R5cGU9bnVtYmVyXVwiKTtcblxucmFuZ2VTLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gIGVsLm9uaW5wdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNsaWRlMSA9IHBhcnNlRmxvYXQocmFuZ2VTWzBdLnZhbHVlKSxcbiAgICAgIHNsaWRlMiA9IHBhcnNlRmxvYXQocmFuZ2VTWzFdLnZhbHVlKTtcblxuICAgIGlmIChzbGlkZTEgPiBzbGlkZTIpIHtcbiAgICAgIFtzbGlkZTEsIHNsaWRlMl0gPSBbc2xpZGUyLCBzbGlkZTFdO1xuICAgICAgLy8gdmFyIHRtcCA9IHNsaWRlMjtcbiAgICAgIC8vIHNsaWRlMiA9IHNsaWRlMTtcbiAgICAgIC8vIHNsaWRlMSA9IHRtcDtcbiAgICB9XG5cbiAgICBudW1iZXJTWzBdLnZhbHVlID0gc2xpZGUxO1xuICAgIG51bWJlclNbMV0udmFsdWUgPSBzbGlkZTI7XG5cbiAgICBmaWx0ZXJfZGF0ZShbbnVtYmVyU1swXS52YWx1ZSwgbnVtYmVyU1sxXS52YWx1ZV0pO1xuICB9XG59KTtcblxubnVtYmVyUy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICBlbC5vbmJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG51bWJlcjEgPSBwYXJzZUZsb2F0KG51bWJlclNbMF0udmFsdWUpLFxuICAgICAgbnVtYmVyMiA9IHBhcnNlRmxvYXQobnVtYmVyU1sxXS52YWx1ZSk7XG5cbiAgICBpZiAobnVtYmVyMSA+IG51bWJlcjIpIHtcbiAgICAgIHZhciB0bXAgPSBudW1iZXIxO1xuICAgICAgbnVtYmVyU1swXS52YWx1ZSA9IG51bWJlcjI7XG4gICAgICBudW1iZXJTWzFdLnZhbHVlID0gdG1wO1xuICAgIH1cblxuICAgIHJhbmdlU1swXS52YWx1ZSA9IG51bWJlcjE7XG4gICAgcmFuZ2VTWzFdLnZhbHVlID0gbnVtYmVyMjtcblxuICAgIGZpbHRlcl9kYXRlKFtyYW5nZVNbMF0udmFsdWUsIHJhbmdlU1sxXS52YWx1ZV0pO1xuICB9XG4gIGVsLm9ua2V5dXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gMTMpIHtcbiAgICAgIGVsLmJsdXIoKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBmaWx0ZXJfZGF0ZShkYXRlcykge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNhdGVsbGl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2F0X2RhdGUgPSBuZXcgRGF0ZShzYXRlbGxpdGVzW2ldLmRhdGUpO1xuICAgIHZhciBzYXRfZGF0ZSA9IHNhdF9kYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgaWYgKGRhdGVzWzBdID4gc2F0X2RhdGUgfHwgZGF0ZXNbMV0gPCBzYXRfZGF0ZSkge1xuICAgICAgc2F0ZWxsaXRlc1tpXS5vYmplY3Quc2hvdyA9IGZhbHNlO1xuICAgICAgc2F0ZWxsaXRlc1tpXS5saW5lLnNob3cgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2F0ZWxsaXRlc1tpXS5vYmplY3Quc2hvdyA9IHRydWU7XG4gICAgICBzYXRlbGxpdGVzW2ldLmxpbmUuc2hvdyA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbi8vICBGSUxURVJcblxudmFyIHNlbGVjdF9vcmcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzZWxlY3QnKTtcblxuc2VsZWN0X29yZy5vbmNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzYXRlbGxpdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT0gJ09yZ2FuaXNhdGlvbicpIHNhdGVsbGl0ZXNbaV0ub2JqZWN0LnNob3cgPSB0cnVlO1xuICAgIGVsc2Uge1xuICAgICAgaWYgKHRoaXMudmFsdWUgPT0gJ090aGVycycpIHtcbiAgICAgICAgaWYgKHNhdGVsbGl0ZXNbaV0uaW5mb3MgIT0gJ1BhcyBkZSBkb25uw6llcycpIHtcbiAgICAgICAgICBzYXRlbGxpdGVzW2ldLm9iamVjdC5zaG93ID0gZmFsc2U7XG4gICAgICAgICAgc2F0ZWxsaXRlc1tpXS5saW5lLnNob3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzYXRlbGxpdGVzW2ldLm9iamVjdC5zaG93ID0gdHJ1ZTtcbiAgICAgICAgICBzYXRlbGxpdGVzW2ldLmxpbmUuc2hvdyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2F0ZWxsaXRlc1tpXS5pbmZvcy5jb3VudHJ5ID09IHRoaXMudmFsdWUpIHtcbiAgICAgICAgc2F0ZWxsaXRlc1tpXS5vYmplY3Quc2hvdyA9IHRydWU7XG4gICAgICAgIHNhdGVsbGl0ZXNbaV0ubGluZS5zaG93ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNhdGVsbGl0ZXNbaV0ub2JqZWN0LnNob3cgPSBmYWxzZTtcbiAgICAgICAgc2F0ZWxsaXRlc1tpXS5saW5lLnNob3cgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIHNlYXJjaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuYW1lJyk7XG5cbnNlYXJjaC5vbmNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLnZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2F0ZWxsaXRlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzYXRlbGxpdGVzW2ldLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhuYW1lKSkge1xuICAgICAgc2F0ZWxsaXRlc1tpXS5vYmplY3Quc2hvdyA9IHRydWU7XG4gICAgICBzYXRlbGxpdGVzW2ldLmxpbmUuc2hvdyA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNhdGVsbGl0ZXNbaV0ub2JqZWN0LnNob3cgPSBmYWxzZTtcbiAgICAgIHNhdGVsbGl0ZXNbaV0ubGluZS5zaG93ID0gZmFsc2U7XG4gICAgfVxuICB9XG59XG4iXX0=

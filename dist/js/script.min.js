"use strict";function geodGBL(){var e;"undefined"==(e=void 0===EARTH_A?"undefined":_typeof(EARTH_A))&&wgs84()}function earthcon(e,t){var a,n,r,s,i;s=Number(e),i=Number(t),a=1-i/s,r=1-i*i/(s*s),n=Math.sqrt(r),EARTH_A=s,EARTH_B=i,EARTH_F=a,EARTH_Ecc=n,EARTH_Esq=r}function wgs84(){var e,t,a;e=6378.137,a=1/298.257223563,t=e*(1-a),earthcon(e,t)}function radcur(e){var t,a,n,r,s,i,o,u,l,c,h,d,p,v,f,m,b=new Array(3),y=Math.PI/180;return geodGBL(),t=EARTH_A,a=EARTH_B,r=t*t,s=a*a,i=1-s/r,Math.sqrt(i),n=Number(e),o=Math.cos(y*n),u=Math.sin(y*n),l=1-i*u*u,c=Math.sqrt(l),h=t/c,d=h*(1-i)/l,p=h*o,m=(1-i)*h*u,v=p*p+m*m,f=Math.sqrt(v),b[0]=f,b[1]=h,b[2]=d,b}function rearth(e){var t,a;return a=Number(e),t=radcur(a),t[0]}function gc2gd(e,t){var a,n,r,s,i,o,u,l,c,h=Math.PI/180,d=1/h,p=new Array(3);return geodGBL(),n=Number(e),r=Number(t),i=EARTH_Ecc,o=i*i,l=r,p=radcur(n),s=p[1],c=1-o*s/(s+l),u=Math.tan(h*n)/c,a=d*Math.atan(u),p=radcur(a),s=p[1],c=1-o*s/(s+l),u=Math.tan(h*n)/c,a=d*Math.atan(u)}function gd2gc(e,t){var a,n,r,s,i,o,u,l,c=Math.PI/180,h=1/c,d=new Array(3);return geodGBL(),a=Number(e),n=Number(t),s=EARTH_Ecc,i=s*s,u=n,d=radcur(a),r=d[1],l=1-i*r/(r+u),o=Math.tan(c*a)*l,h*Math.atan(o)}function llenu(e,t){var a,n,r,s,i,o,u,l=new Array(3),c=new Array(3),h=new Array(3),d=new Array(3),r=Math.PI/180;return a=Number(e),n=Number(t),s=Math.cos(r*a),i=Math.sin(r*a),o=Math.cos(r*n),u=Math.sin(r*n),l[0]=-u,l[1]=o,l[2]=0,c[0]=-o*i,c[1]=-u*i,c[2]=s,h[0]=o*s,h[1]=u*s,h[2]=i,d[0]=l,d[1]=c,d[2]=h,d}function xyzllh(e){var t,a,n,r,s,i,o,u,l,c,h,d,p,v,f,m,b,y,g,w=Math.PI/180,A=new Array(3),S=new Array(3);if(geodGBL(),v=EARTH_Esq,i=e[0],o=e[1],u=e[2],i=Number(i),o=Number(o),u=Number(u),s=Math.sqrt(i*i+o*o+u*u),t=Math.asin(u/s)/w,h=Math.abs(i)+Math.abs(o),y=h<1e-10?0:Math.atan2(o,i)/w,y<0&&(y+=360),(l=Math.sqrt(i*i+o*o))<1e-10)return b=90,u<0&&(b=-90),g=s-rearth(b),S[0]=b,S[1]=y,S[2]=g,S;r=rearth(t),g=s-r,b=gc2gd(t,g),A=radcur(b),p=A[1];for(var d=0;d<5&&(m=Math.sin(w*b),c=(u+p*v*m)/l,a=Math.atan(c)/w,n=a-b,b=a,f=Math.cos(w*b),A=radcur(b),p=A[1],g=l/f-p,!(Math.abs(n)<1e-12));d++);return S[0]=b,S[1]=y,S[2]=g,S}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function filter_date(e){for(var t=0;t<satellites.length;t++){var a=new Date(satellites[t].date),a=a.getFullYear();e[0]>a||e[1]<a?satellites[t].object.show=!1:satellites[t].object.show=!0}}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},EARTH_A,EARTH_B,EARTH_F,EARTH_Ecc,EARTH_Esq,_createClass=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),viewer=new Cesium.Viewer("cesiumContainer",{fullscreenButton:!1,baseLayerPicker:!1,timeline:!1,homeButton:!1,infoBoxe:!1,navigationHelpButton:!1,selectionIndicator:!1,vrButton:!1,geocoder:!1,sceneModePicker:!1,animation:!1});document.querySelector(".cesium-viewer-bottom").style.display="none";var cross=document.querySelector("#cross"),menu=document.querySelector(".left_menu"),cross_div=document.querySelector(".exit");cross.addEventListener("click",function(){"true"==this.getAttribute("data-open")?(this.setAttribute("data-open",!1),menu.classList.remove("active"),cross_div.classList.remove("active")):(this.setAttribute("data-open",!0),menu.classList.add("active"),cross_div.classList.add("active"))});for(var sat=function(){function e(t,a,n,r,s){_classCallCheck(this,e);var i=this;this.name=t,this.date=n,this.id=a,this.true_pos=s,this.pos=xyzllh(s),this.infos=r,this.object=new Cesium.Entity({id:this.id,name:this.name,position:new Cesium.Cartesian3.fromDegrees(this.pos[0],this.pos[1],1e3*this.pos[2]),ellipsoid:{radii:new Cesium.Cartesian3(5e4,5e4,5e4),material:Cesium.Color.RED},label:{text:this.name,font:"10pt arial",style:Cesium.LabelStyle.FILL_AND_OUTLINE,outlineWidth:2,verticalOrigin:Cesium.VerticalOrigin.BOTTOM,pixelOffset:new Cesium.Cartesian2(0,-25)}}),this.popup=new Cesium.Entity(i.name),this.popup={title:""},this.popup.description={getValue:function(){return'<div class="pop_up"><div class="exit"></div><h2>'+i.name+"</h2><p>Lauched : "+i.date+"</p><p> Country : "+i.infos.country+"</p><p> Function : "+i.infos.discipline+"</p><p> Mass : "+i.infos.mass+"</p><p>Description : "+i.infos.description+"</p></div>"}},this.create()}return _createClass(e,[{key:"create",value:function(){viewer.entities.add(this.object)}}]),e}(),satellites=[],i=0;i<sats.length;i++)satellites.push(new sat(sats[i].name,sats[i].id,sats[i].date,sats[i].infos,sats[i].pos));console.log(satellites);var handler=new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);handler.setInputAction(function(e){for(var t=viewer.scene.pick(e.position),a=0;a<satellites.length;a++)Cesium.defined(t)&&t.id==satellites[a].object&&(viewer.selectedEntity=satellites[a].popup)},Cesium.ScreenSpaceEventType.LEFT_CLICK);var parent=document.querySelector(".range-slider"),rangeS=parent.querySelectorAll("input[type=range]"),numberS=parent.querySelectorAll("input[type=number]");rangeS.forEach(function(e){e.oninput=function(){var e=parseFloat(rangeS[0].value),t=parseFloat(rangeS[1].value);if(e>t){var a=[t,e];e=a[0],t=a[1]}numberS[0].value=e,numberS[1].value=t,filter_date([numberS[0].value,numberS[1].value])}}),numberS.forEach(function(e){e.onblur=function(){var e=parseFloat(numberS[0].value),t=parseFloat(numberS[1].value);if(e>t){var a=e;numberS[0].value=t,numberS[1].value=a}rangeS[0].value=e,rangeS[1].value=t,filter_date([rangeS[0].value,rangeS[1].value])},e.onkeyup=function(){13==event.keyCode&&e.blur()}});var select_org=document.querySelector("select");select_org.onchange=function(){for(var e=0;e<satellites.length;e++)"Organisation"==this.value?satellites[e].object.show=!0:"Others"==this.value?"Pas de donnÃ©es"!=satellites[e].infos?satellites[e].object.show=!1:satellites[e].object.show=!0:satellites[e].infos.country==this.value?satellites[e].object.show=!0:satellites[e].object.show=!1};var search=document.querySelector("#name");search.onchange=function(){for(var e=this.value.toLowerCase(),t=0;t<satellites.length;t++)satellites[t].name.toLowerCase().includes(e)?satellites[t].object.show=!0:satellites[t].object.show=!1};
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";function geodGBL(){var e;"undefined"==(e=void 0===EARTH_A?"undefined":_typeof(EARTH_A))&&wgs84()}function earthcon(e,t){var r,a,n,o,i;o=Number(e),i=Number(t),r=1-i/o,n=1-i*i/(o*o),a=Math.sqrt(n),EARTH_A=o,EARTH_B=i,EARTH_F=r,EARTH_Ecc=a,EARTH_Esq=n}function wgs84(){var e,t,r;e=6378.137,r=1/298.257223563,t=e*(1-r),earthcon(e,t)}function radcur(e){var t,r,a,n,o,i,s,c,u,l,h,f,m,y,M,d,A=new Array(3),b=Math.PI/180;return geodGBL(),t=EARTH_A,r=EARTH_B,n=t*t,o=r*r,i=1-o/n,Math.sqrt(i),a=Number(e),s=Math.cos(b*a),c=Math.sin(b*a),u=1-i*c*c,l=Math.sqrt(u),h=t/l,f=h*(1-i)/u,m=h*s,d=(1-i)*h*c,y=m*m+d*d,M=Math.sqrt(y),A[0]=M,A[1]=h,A[2]=f,A}function rearth(e){var t,r;return r=Number(e),t=radcur(r),t[0]}function gc2gd(e,t){var r,a,n,o,i,s,c,u,l,h=Math.PI/180,f=1/h,m=new Array(3);return geodGBL(),a=Number(e),n=Number(t),i=EARTH_Ecc,s=i*i,u=n,m=radcur(a),o=m[1],l=1-s*o/(o+u),c=Math.tan(h*a)/l,r=f*Math.atan(c),m=radcur(r),o=m[1],l=1-s*o/(o+u),c=Math.tan(h*a)/l,r=f*Math.atan(c)}function gd2gc(e,t){var r,a,n,o,i,s,c,u,l=Math.PI/180,h=1/l,f=new Array(3);return geodGBL(),r=Number(e),a=Number(t),o=EARTH_Ecc,i=o*o,c=a,f=radcur(r),n=f[1],u=1-i*n/(n+c),s=Math.tan(l*r)*u,h*Math.atan(s)}function llenu(e,t){var r,a,n,o,i,s,c,u=new Array(3),l=new Array(3),h=new Array(3),f=new Array(3),n=Math.PI/180;return r=Number(e),a=Number(t),o=Math.cos(n*r),i=Math.sin(n*r),s=Math.cos(n*a),c=Math.sin(n*a),u[0]=-c,u[1]=s,u[2]=0,l[0]=-s*i,l[1]=-c*i,l[2]=o,h[0]=s*o,h[1]=c*o,h[2]=i,f[0]=u,f[1]=l,f[2]=h,f}function xyzllh(e){var t,r,a,n,o,i,s,c,u,l,h,f,m,y,M,d,A,b,E,_=Math.PI/180,v=new Array(3),g=new Array(3);if(geodGBL(),y=EARTH_Esq,i=e[0],s=e[1],c=e[2],i=Number(i),s=Number(s),c=Number(c),o=Math.sqrt(i*i+s*s+c*c),t=Math.asin(c/o)/_,h=Math.abs(i)+Math.abs(s),b=h<1e-10?0:Math.atan2(s,i)/_,b<0&&(b+=360),(u=Math.sqrt(i*i+s*s))<1e-10)return A=90,c<0&&(A=-90),E=o-rearth(A),g[0]=A,g[1]=b,g[2]=E,g;n=rearth(t),E=o-n,A=gc2gd(t,E),v=radcur(A),m=v[1];for(var f=0;f<5&&(d=Math.sin(_*A),l=(c+m*y*d)/u,r=Math.atan(l)/_,a=r-A,A=r,M=Math.cos(_*A),v=radcur(A),m=v[1],E=u/M-m,!(Math.abs(a)<1e-12));f++);return g[0]=A,g[1]=b,g[2]=E,g}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},EARTH_A,EARTH_B,EARTH_F,EARTH_Ecc,EARTH_Esq,viewer=new Cesium.Viewer("cesiumContainer",{fullscreenButton:!1,baseLayerPicker:!1,timeline:!1,homeButton:!1,infoBoxe:!1,navigationHelpButton:!1,selectionIndicator:!1,vrButton:!1,geocoder:!1,sceneModePicker:!1,animation:!1}),blueEllipsoid=viewer.entities.add({name:"Blue ellipsoid",position:Cesium.Cartesian3.fromDegrees(-114,40,4e5),ellipsoid:{radii:new Cesium.Cartesian3(1e5,1e5,1e5),material:Cesium.Color.BLUE}});document.querySelector(".cesium-viewer-bottom").style.display="none";var ecef=[100,100,100];console.log(xyzllh(ecef)),console.log(sats);for(var sat=function e(t){_classCallCheck(this,e),this.name=t},satellites=[],i=0;i<sats.Observatory[1].length;i++);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

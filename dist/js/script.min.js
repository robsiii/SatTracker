"use strict";function geodGBL(){var e;"undefined"==(e=void 0===EARTH_A?"undefined":_typeof(EARTH_A))&&wgs84()}function earthcon(e,t){var a,n,r,i,s;i=Number(e),s=Number(t),a=1-s/i,r=1-s*s/(i*i),n=Math.sqrt(r),EARTH_A=i,EARTH_B=s,EARTH_F=a,EARTH_Ecc=n,EARTH_Esq=r}function wgs84(){var e,t,a;e=6378.137,a=1/298.257223563,t=e*(1-a),earthcon(e,t)}function radcur(e){var t,a,n,r,i,s,o,u,c,l,h,p,f,d,m,v,y=new Array(3),b=Math.PI/180;return geodGBL(),t=EARTH_A,a=EARTH_B,r=t*t,i=a*a,s=1-i/r,Math.sqrt(s),n=Number(e),o=Math.cos(b*n),u=Math.sin(b*n),c=1-s*u*u,l=Math.sqrt(c),h=t/l,p=h*(1-s)/c,f=h*o,v=(1-s)*h*u,d=f*f+v*v,m=Math.sqrt(d),y[0]=m,y[1]=h,y[2]=p,y}function rearth(e){var t,a;return a=Number(e),t=radcur(a),t[0]}function gc2gd(e,t){var a,n,r,i,s,o,u,c,l,h=Math.PI/180,p=1/h,f=new Array(3);return geodGBL(),n=Number(e),r=Number(t),s=EARTH_Ecc,o=s*s,c=r,f=radcur(n),i=f[1],l=1-o*i/(i+c),u=Math.tan(h*n)/l,a=p*Math.atan(u),f=radcur(a),i=f[1],l=1-o*i/(i+c),u=Math.tan(h*n)/l,a=p*Math.atan(u)}function gd2gc(e,t){var a,n,r,i,s,o,u,c,l=Math.PI/180,h=1/l,p=new Array(3);return geodGBL(),a=Number(e),n=Number(t),i=EARTH_Ecc,s=i*i,u=n,p=radcur(a),r=p[1],c=1-s*r/(r+u),o=Math.tan(l*a)*c,h*Math.atan(o)}function llenu(e,t){var a,n,r,i,s,o,u,c=new Array(3),l=new Array(3),h=new Array(3),p=new Array(3),r=Math.PI/180;return a=Number(e),n=Number(t),i=Math.cos(r*a),s=Math.sin(r*a),o=Math.cos(r*n),u=Math.sin(r*n),c[0]=-u,c[1]=o,c[2]=0,l[0]=-o*s,l[1]=-u*s,l[2]=i,h[0]=o*i,h[1]=u*i,h[2]=s,p[0]=c,p[1]=l,p[2]=h,p}function xyzllh(e){var t,a,n,r,i,s,o,u,c,l,h,p,f,d,m,v,y,b,A,E=Math.PI/180,M=new Array(3),w=new Array(3);if(geodGBL(),d=EARTH_Esq,s=e[0],o=e[1],u=e[2],s=Number(s),o=Number(o),u=Number(u),i=Math.sqrt(s*s+o*o+u*u),t=Math.asin(u/i)/E,h=Math.abs(s)+Math.abs(o),b=h<1e-10?0:Math.atan2(o,s)/E,b<0&&(b+=360),(c=Math.sqrt(s*s+o*o))<1e-10)return y=90,u<0&&(y=-90),A=i-rearth(y),w[0]=y,w[1]=b,w[2]=A,w;r=rearth(t),A=i-r,y=gc2gd(t,A),M=radcur(y),f=M[1];for(var p=0;p<5&&(v=Math.sin(E*y),l=(u+f*d*v)/c,a=Math.atan(l)/E,n=a-y,y=a,m=Math.cos(E*y),M=radcur(y),f=M[1],A=c/m-f,!(Math.abs(n)<1e-12));p++);return w[0]=y,w[1]=b,w[2]=A,w}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},EARTH_A,EARTH_B,EARTH_F,EARTH_Ecc,EARTH_Esq,_createClass=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),viewer=new Cesium.Viewer("cesiumContainer",{fullscreenButton:!1,baseLayerPicker:!1,timeline:!1,homeButton:!1,infoBoxe:!1,navigationHelpButton:!1,selectionIndicator:!1,vrButton:!1,geocoder:!1,sceneModePicker:!1,animation:!1});document.querySelector(".cesium-viewer-bottom").style.display="none";for(var sat=function(){function e(t,a,n,r,i){_classCallCheck(this,e);var s=this;this.name=t,this.date=n,this.id=a,this.true_pos=i,this.pos=xyzllh(i),this.infos=r,this.object=new Cesium.Entity({id:this.id,name:this.name,position:new Cesium.Cartesian3.fromDegrees(this.pos[0],this.pos[1],1e3*this.pos[2]),ellipsoid:{radii:new Cesium.Cartesian3(5e4,5e4,5e4),material:Cesium.Color.RED},label:{text:this.name,font:"10pt arial",style:Cesium.LabelStyle.FILL_AND_OUTLINE,outlineWidth:2,verticalOrigin:Cesium.VerticalOrigin.BOTTOM,pixelOffset:new Cesium.Cartesian2(0,-25)}}),this.popup=new Cesium.Entity(s.name),this.popup={title:""},this.popup.description={getValue:function(){return'<div class="pop_up"><div class="exit"></div><h2>'+s.name+"</h2><p>Lauched : "+s.date+"</p><p> Country : "+s.infos.country+"</p><p> Function : "+s.infos.discipline+"</p><p> Mass : "+s.infos.mass+"</p><p>Description : "+s.infos.description+"</p></div>"}},this.create()}return _createClass(e,[{key:"create",value:function(){viewer.entities.add(this.object)}}]),e}(),satellites=[],i=0;i<sats.length;i++)satellites.push(new sat(sats[i].name,sats[i].id,sats[i].date,sats[i].infos,sats[i].pos));console.log(satellites);var handler=new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);handler.setInputAction(function(e){for(var t=viewer.scene.pick(e.position),a=0;a<satellites.length;a++)Cesium.defined(t)&&t.id==satellites[a].object&&(viewer.selectedEntity=satellites[a].popup)},Cesium.ScreenSpaceEventType.LEFT_CLICK),function(){var e=document.querySelector(".range-slider");if(e){var t=e.querySelectorAll("input[type=range]"),a=e.querySelectorAll("input[type=number]");t.forEach(function(e){e.oninput=function(){var e=parseFloat(t[0].value),n=parseFloat(t[1].value);if(e>n){var r=[n,e];e=r[0],n=r[1]}a[0].value=e,a[1].value=n}}),a.forEach(function(e){e.oninput=function(){var e=parseFloat(a[0].value),n=parseFloat(a[1].value);if(e>n){var r=e;a[0].value=n,a[1].value=r}t[0].value=e,t[1].value=n}})}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

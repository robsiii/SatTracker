
     Notes on JavaScript
     James R. Clynch
     Naval Postgraduate School
     February 20, 2003

     I.   Background

     Using Java Script (JS or Jscript) to produce some interactive
     web pages for educational purposes.  Took some geodesy routines
     in Fortran and ported these to Jscript. 

     Used two reference books:

          _Using JavaScript_ , Paul McFedries, Que 2001
          _JavaScript, The Definitive Guide", David Flanagan, O'Reilly 2002

     II.  Major Items

     1.   Javascript looks much like C or C++ but has major differences.

     2.   It is an "UNTYPED" language.  Any variable can be any type
          and it can change on the fly. You may not know that this happens,
          the interpreter tries to help.

          Problem:       x = 10;
                         y = 20;
          what is        z = x+ y;

          Here the answer is 30.  But can have code between the statements
          that cause x and/or y to become strings.  Then "+" may mean
          concatenation. So
                         z = x + y  is string 1020
          and later this can be automaticly converted to the number
          1020 and used as a number.

     3.   All undeclared variables are GLOBAL.
          If you use  "count" or "i" in a subroutine and both this routine
          and an upstream  program used it undeclared, they step on each 
          other.

               var  x,y;           etc.  EVERYTHING

     4.   The language is mainly for operating in a HTML document. 
          But you can only return text and formating, no graphs can
          be generated in client by JavaScript.

     5.   There are 3 places code can be:
               a.   In the body of the HTML.  It is executed as the
                    page is loaded. You don't see the code if you have
                    the JavaScript option turned on in the browser. Just
                    the result shows up.
               b.   In the Header.  Executed only if called.
               c.   In an external file referenced in header. Like b.

     6.   Subroutines called after loading cannot easily get at the 
          current page to output things.  The exception is a "Text Area"
          of a form. (There is a topic of Dynamic HTML that might be
          better at this, but I have not looked at it.)  If you write
          to a "page" in a called subroutine, a new page is genrated and
          "loaded".  You leave the current page.

     7.   The language is case sensitive.  Math.PI  is a valid, built
          in version of the number Pi.  math.pi, Math.pi,  etc are not.

     8.   You interact with the user mainly through forms.  You get 
          a subroutine called with an "onsubmit" or "onclick" event.

     9.   You reference things as if in a structure.  With periods 
          between levels.  If you have a form with name "Io_Input" and
          a variable with name "Variable1" inside it, then

               var1  =   document.Io_Input.Variable1.value;
               var1  =   Number(var1);

          get's the number entered after the subroutine is called.
          NOTE:  a.  case must match
                 b.  used built in function "Number" to ensure a
                     number. (Will return "undefined" or "NaN" if bad)

    10.   In form, have "onsubmit" attribute with something that
          returns "false" to prevent click or cr "executing" last return
          value.  Or just reloading current page.

          ie   <form      onsubmit ="return false"  >  works

    11.   Automatic addition of ";" to end of most lines.  But can
          think is to be continued....  bad confusion. 
          best to use own ";" at end of statement


